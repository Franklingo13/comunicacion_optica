#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>

#define ANCHO 128
#define ALTO 64


#define OLED_RESET 4 
Adafruit_SSD1306 oled(ANCHO,ALTO, &Wire, OLED_RESET);

//DECLARACION DE VARIABLES

int anteriorMillis = 0;
int tiempo = 0;
float valorAnalogico = 0;
float voltaje = 0;
float graficaVoltaje = 0;

int x[128]; //buffer de la grafica 
int y[128]; //buffer secundario de la grafica 

//BANDERA PARA ANIMACION INICIAL
int b = 0;  // bandera para el display 
int retraso = 5000; //Tiempo de animacion


// 'imagen_2022-10-13_234720195', 128x64px
const unsigned char prueba [] PROGMEM = {
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xf0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xfc, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0x87, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xff, 0xe7, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xfe, 0x3f, 0xff, 0xff, 0xef, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xf7, 0xff, 0xff, 0xff, 0xff, 0xff, 0xbe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xfb, 0x9f, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xef, 0xfc, 0x4f, 0xff, 0xff, 0xdf, 0xff, 0x7f, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xef, 0xf9, 0xcf, 0xff, 0xff, 0xdb, 0xff, 0x5d, 0x7f, 0xef, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xf7, 0xf2, 0xdf, 0xff, 0xff, 0xdb, 0xff, 0x7d, 0x7f, 0xef, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xf7, 0xce, 0xdf, 0xff, 0xf9, 0xdb, 0xff, 0xfb, 0x7f, 0xef, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0x3f, 0xdf, 0xff, 0xfb, 0xdf, 0xff, 0xeb, 0xff, 0xef, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xfa, 0x7f, 0xdf, 0xfc, 0xfe, 0xbf, 0xff, 0xeb, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xfd, 0xff, 0x5f, 0xff, 0xfe, 0xbf, 0xff, 0xeb, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0x9f, 0xff, 0xfe, 0xbd, 0xdf, 0xf7, 0xfd, 0xdf, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xbf, 0xff, 0xf7, 0x7d, 0xfe, 0xff, 0xff, 0xdf, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0x7f, 0xbf, 0xff, 0x77, 0xfd, 0xfe, 0xff, 0xbe, 0xdf, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xbf, 0xff, 0x77, 0xfd, 0xfe, 0xff, 0xbf, 0xdf, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0x3f, 0xff, 0xbf, 0xff, 0x7f, 0xfd, 0xfe, 0xff, 0xbf, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0x1f, 0xdf, 0x3f, 0xff, 0x7f, 0xff, 0xfe, 0xff, 0xbf, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0x1f, 0xf7, 0x7f, 0xff, 0x7f, 0xff, 0x76, 0xff, 0xf7, 0x7f, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xfe, 0x5f, 0xfc, 0x7f, 0xff, 0x6f, 0xfe, 0x77, 0xff, 0xd7, 0x3f, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xfe, 0xcf, 0xff, 0xff, 0xff, 0xaf, 0xff, 0xf5, 0xff, 0xd7, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xfc, 0xef, 0xff, 0xff, 0xff, 0xaf, 0xff, 0xf5, 0xff, 0xdf, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xfc, 0xe7, 0xff, 0xff, 0xff, 0xaf, 0xff, 0xf9, 0xff, 0xcf, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xfd, 0xe7, 0xff, 0xff, 0xff, 0xaf, 0xff, 0xfb, 0xff, 0xef, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xf9, 0xf3, 0xff, 0xff, 0xff, 0xdf, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xfb, 0xf3, 0xff, 0xff, 0xff, 0xdf, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xf3, 0xfb, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xf1, 0xf1, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xe6, 0xed, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xe7, 0xbc, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xef, 0x5e, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xcf, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xdb, 0xfa, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0x9f, 0xfc, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0x9f, 0xff, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0x1f, 0xff, 0x3f, 0xff, 0xff, 0xcf, 0x3f, 0xff, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0x39, 0xf3, 0x9f, 0xff, 0xff, 0xb8, 0xda, 0x72, 0xcd, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0x7e, 0x4f, 0x9f, 0xff, 0xff, 0xc8, 0x3e, 0x10, 0xc4, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xfe, 0x7c, 0xe7, 0xdf, 0xff, 0xff, 0xb0, 0xde, 0x71, 0x85, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xfe, 0xf3, 0xf9, 0xcf, 0xff, 0xff, 0x88, 0x1e, 0x15, 0xb4, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xfc, 0x7f, 0xff, 0xcf, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xfc, 0xff, 0xff, 0xe7, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xfd, 0xff, 0xff, 0xe7, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xf9, 0xef, 0xfe, 0xf3, 0xff, 0xff, 0xff, 0xf8, 0xc7, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xfb, 0xff, 0xff, 0xf3, 0xff, 0xff, 0xff, 0xfb, 0x5f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xf3, 0xfe, 0xef, 0xfb, 0xff, 0xff, 0xff, 0xfb, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xf3, 0xff, 0x1f, 0xf9, 0xff, 0xff, 0xff, 0xfb, 0x5f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xe7, 0xfe, 0xef, 0xfd, 0xff, 0xff, 0xff, 0xf8, 0xc3, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xe7, 0xfd, 0xf7, 0xfc, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xef, 0xff, 0xff, 0xfc, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xcf, 0xdf, 0xff, 0x7e, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xdf, 0xff, 0xff, 0xfe, 0x71, 0x89, 0x08, 0x54, 0x76, 0x14, 0x6e, 0x31, 0xff, 0xff, 0xff, 0xff, 
  0x9d, 0xff, 0xff, 0xf7, 0x67, 0x61, 0x08, 0x51, 0xe2, 0xf1, 0xa2, 0xf7, 0xff, 0xff, 0xff, 0xff, 
  0x9f, 0xff, 0xff, 0xff, 0x27, 0x60, 0x88, 0x11, 0xe2, 0xf1, 0xa2, 0x39, 0xff, 0xff, 0xff, 0xff, 
  0x8f, 0xff, 0xff, 0xfe, 0x35, 0x2a, 0xaa, 0x95, 0x0a, 0xd5, 0x2a, 0xe5, 0xff, 0xff, 0xff, 0xff, 
  0x00, 0x00, 0x00, 0x00, 0x39, 0x9e, 0xe2, 0xd6, 0x5f, 0x3e, 0x7a, 0x33, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff
};


void setup() {
  Serial.begin(9600);
  // put your setup code here, to run once:
  Wire.begin();
  oled.begin(SSD1306_SWITCHCAPVCC,0x3C);
  oled.clearDisplay();


}

void loop() {
   
  // put your main code here, to run repeatedly:
  //INICIALIZA ANIMACIÓN-PRESENTACIÓN // 
  if (b == 0){
      oled.drawBitmap(0,0,prueba,128,64,BLACK,WHITE);
      oled.display();
      delay(retraso); 
      b = 1; 
    }
  //===============================================//
  oled.clearDisplay();
  // DIBUJO DE ESCALA // 

  oled.setCursor(0, 0); 
  oled.print(F("5V")); 
  oled.setCursor(0, 11);   
  oled.print(F("4V"));
  oled.setCursor(0, 22); 
  oled.print(F("3V"));
  oled.setCursor(0, 32);  
  oled.print(F("2V"));      
  oled.setCursor(0, 43); 
  oled.print(F("1V")); 

  oled.drawLine(15, 0, 25, 0, WHITE);
  oled.drawLine(15, 11, 25, 11, WHITE);
  oled.drawLine(15, 22, 25, 22, WHITE);
  oled.drawLine(15, 32, 25, 32, WHITE);
  oled.drawLine(15, 43, 25, 43, WHITE);
  //dibuja eje X y Y 
  oled.drawLine(0, 53, 127, 53, WHITE);
  oled.drawLine(25, 53, 25, 0, WHITE);
  //======================================/
  oled.setTextColor(WHITE); //NO MULTIPLES COLORES
  valorAnalogico = analogRead(15); //lee el valor analogico del pin 9 gpio25
  voltaje=(valorAnalogico*3.3)/1024; //calcula el valor en voltaje
  Serial.println(voltaje); 
  graficaVoltaje=map(valorAnalogico,0,1023,53,0); //escala el valor analogico a un pixel imprimible en pantalla

  x[127]=graficaVoltaje; //asigna el valor escalado a el ultimo dato de la matriz
  
  for(int i=127;i>=25;i--){ 
      oled.drawPixel(i, x[i], WHITE); //dibuja punto a punto el contenido de x
      y[i-1]=x[i]; //guarda la informacion desplazada una posicion temporalmente en y
    }
  //imprime el voltaje en texto  
  oled.setCursor(25, 57); 
  oled.print(voltaje);
  oled.print(F(" v    "));

  //imprime el tiempo que se tarda en tomar y mostrar cada dato
  tiempo = millis()-anteriorMillis;
  oled.print(tiempo);
  anteriorMillis = millis();
  oled.print(F(" ms"));
    
  oled.display(); //despliega la informacion del buffer en la pantalla
  
  //delay(60); //pausa opcional

  for(int i=127;i>=0;i--){
    x[i]=y[i]; //envia los datos desplazados de vuelta a la variable x
  }

}
